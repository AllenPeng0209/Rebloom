import { config } from '@/config'\nimport { MoodAnalysis, PatternAnalysis, VoiceAnalysis, ConversationSession } from '@/types'\nimport { logger, performanceLogger } from '@/utils/logger'\nimport { encryptionService } from './encryptionService'\n\ninterface BailianMessage {\n  role: 'user' | 'assistant' | 'system'\n  content: string\n}\n\ninterface BailianResponse {\n  output: {\n    text: string\n    finish_reason: string\n  }\n  usage: {\n    input_tokens: number\n    output_tokens: number\n    total_tokens: number\n  }\n  request_id: string\n}\n\ninterface AIAnalysisOptions {\n  includeContext?: boolean\n  confidenceThreshold?: number\n  analysisDepth?: 'basic' | 'detailed' | 'comprehensive'\n  preservePrivacy?: boolean\n}\n\ninterface TherapeuticResponse {\n  content: string\n  therapeuticTechniques: string[]\n  emotionalTone: string\n  personalizationLevel: number\n  followUpSuggestions: string[]\n  metadata: {\n    model: string\n    processingTime: number\n    confidence: number\n    tokens: number\n  }\n}\n\ninterface MoodAnalysisRequest {\n  text: string\n  userId: string\n  conversationHistory?: BailianMessage[]\n  contextualFactors?: {\n    timeOfDay?: string\n    recentEvents?: string[]\n    moodHistory?: number[]\n  }\n}\n\nclass AIService {\n  private readonly bailianEndpoint: string\n  private readonly bailianApiKey: string\n  private readonly modelConfigurations = {\n    'mood-analysis': {\n      model: 'qwen-max',\n      temperature: 0.3,\n      maxTokens: 1000\n    },\n    'crisis-detection': {\n      model: 'qwen-max',\n      temperature: 0.1,\n      maxTokens: 1500\n    },\n    'therapeutic-response': {\n      model: 'qwen-plus',\n      temperature: 0.7,\n      maxTokens: 2000\n    },\n    'pattern-analysis': {\n      model: 'qwen-max',\n      temperature: 0.2,\n      maxTokens: 1200\n    }\n  }\n\n  constructor() {\n    this.bailianEndpoint = config.ai.bailianEndpoint\n    this.bailianApiKey = config.ai.bailianApiKey\n    \n    if (!this.bailianApiKey) {\n      logger.warn('Bailian API key not configured - AI features will be limited')\n    }\n  }\n\n  /**\n   * Enhanced mood analysis with contextual understanding\n   */\n  async analyzeMoodAdvanced(request: MoodAnalysisRequest): Promise<MoodAnalysis> {\n    const startTime = Date.now()\n    \n    try {\n      // Prepare analysis prompt with context\n      const prompt = this.buildMoodAnalysisPrompt(request)\n      \n      // Call Bailian API\n      const response = await this.callBailianAPI(prompt, 'mood-analysis')\n      \n      // Parse and validate response\n      const analysisResult = this.parseMoodAnalysisResponse(response.output.text)\n      \n      const moodAnalysis: MoodAnalysis = {\n        userId: request.userId,\n        primaryMood: analysisResult.primaryMood || 'neutral',\n        emotions: analysisResult.emotions || {},\n        anxietyLevel: analysisResult.anxietyLevel || 5,\n        depressionIndicators: analysisResult.depressionIndicators || {},\n        stressLevel: analysisResult.stressLevel || 5,\n        confidence: analysisResult.confidence || 0.7,\n        timestamp: new Date(),\n        analysisVersion: 'enhanced-v1.2'\n      }\n\n      // Log performance\n      const processingTime = Date.now() - startTime\n      performanceLogger.logAIResponse(\n        request.userId,\n        'mood-analysis',\n        processingTime,\n        moodAnalysis.confidence\n      )\n\n      return moodAnalysis\n\n    } catch (error) {\n      logger.error('Advanced mood analysis failed', {\n        userId: request.userId,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      })\n      \n      // Return conservative fallback\n      return this.createFallbackMoodAnalysis(request.userId)\n    }\n  }\n\n  /**\n   * Analyze text sentiment for crisis detection\n   */\n  async analyzeSentiment(text: string): Promise<{\n    sentiment: number // -1 to 1\n    emotions: {\n      joy: number\n      sadness: number\n      anger: number\n      fear: number\n      surprise: number\n      disgust: number\n    }\n    confidence: number\n  }> {\n    try {\n      const prompt = `\n        Analyze the emotional sentiment and tone of the following text.\n        Provide scores from 0.0 to 1.0 for each emotion and an overall sentiment from -1.0 (very negative) to 1.0 (very positive).\n        \n        Text: \"${text}\"\n        \n        Respond in JSON format:\n        {\n          \"sentiment\": -1.0 to 1.0,\n          \"emotions\": {\n            \"joy\": 0.0-1.0,\n            \"sadness\": 0.0-1.0,\n            \"anger\": 0.0-1.0,\n            \"fear\": 0.0-1.0,\n            \"surprise\": 0.0-1.0,\n            \"disgust\": 0.0-1.0\n          },\n          \"confidence\": 0.0-1.0\n        }\n      `\n\n      const response = await this.callBailianAPI(prompt, 'crisis-detection')\n      const result = JSON.parse(response.output.text)\n\n      return {\n        sentiment: result.sentiment || 0,\n        emotions: result.emotions || {\n          joy: 0, sadness: 0, anger: 0, fear: 0, surprise: 0, disgust: 0\n        },\n        confidence: result.confidence || 0.5\n      }\n\n    } catch (error) {\n      logger.error('Sentiment analysis failed', { error })\n      return {\n        sentiment: 0,\n        emotions: { joy: 0, sadness: 0, anger: 0, fear: 0, surprise: 0, disgust: 0 },\n        confidence: 0.1\n      }\n    }\n  }\n\n  /**\n   * Generate therapeutic response with personalization\n   */\n  async generateTherapeuticResponse(\n    userMessage: string,\n    userId: string,\n    conversationHistory: BailianMessage[],\n    userPersonality?: any,\n    moodContext?: MoodAnalysis\n  ): Promise<TherapeuticResponse> {\n    const startTime = Date.now()\n    \n    try {\n      const prompt = this.buildTherapeuticPrompt(\n        userMessage,\n        conversationHistory,\n        userPersonality,\n        moodContext\n      )\n\n      const response = await this.callBailianAPI(prompt, 'therapeutic-response')\n      \n      // Parse therapeutic response\n      const therapeuticData = this.parseTherapeuticResponse(response.output.text)\n      \n      const therapeuticResponse: TherapeuticResponse = {\n        content: therapeuticData.response || response.output.text,\n        therapeuticTechniques: therapeuticData.techniques || ['supportive_listening'],\n        emotionalTone: therapeuticData.tone || 'empathetic',\n        personalizationLevel: therapeuticData.personalization || 0.7,\n        followUpSuggestions: therapeuticData.followUp || [],\n        metadata: {\n          model: 'qwen-plus',\n          processingTime: Date.now() - startTime,\n          confidence: therapeuticData.confidence || 0.8,\n          tokens: response.usage.total_tokens\n        }\n      }\n\n      performanceLogger.logAIResponse(\n        userId,\n        'therapeutic-response',\n        therapeuticResponse.metadata.processingTime,\n        therapeuticResponse.metadata.confidence\n      )\n\n      return therapeuticResponse\n\n    } catch (error) {\n      logger.error('Therapeutic response generation failed', {\n        userId,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      })\n      \n      return this.createFallbackTherapeuticResponse()\n    }\n  }\n\n  /**\n   * Analyze behavioral patterns for insights\n   */\n  async analyzeBehavioralPatterns(\n    userId: string,\n    timeframe: string = '30d',\n    dataPoints: {\n      moodScores: number[]\n      conversationFrequency: number[]\n      sleepPatterns: number[]\n      activityLevels: number[]\n      stressEvents: any[]\n    }\n  ): Promise<PatternAnalysis> {\n    try {\n      const prompt = `\n        Analyze the following behavioral patterns and mental health data for insights and trends.\n        \n        Data Summary:\n        - Mood scores (1-10): ${dataPoints.moodScores.slice(-14).join(', ')}\n        - Daily conversations: ${dataPoints.conversationFrequency.slice(-14).join(', ')}\n        - Sleep quality (1-10): ${dataPoints.sleepPatterns.slice(-14).join(', ')}\n        - Activity levels (1-10): ${dataPoints.activityLevels.slice(-14).join(', ')}\n        - Stress events: ${dataPoints.stressEvents.length} in timeframe\n        \n        Provide analysis in JSON format:\n        {\n          \"trends\": {\n            \"mood\": \"improving|declining|stable\",\n            \"sleep\": \"improving|declining|stable\",\n            \"activity\": \"increasing|decreasing|stable\",\n            \"engagement\": \"increasing|decreasing|stable\"\n          },\n          \"patterns\": {\n            \"weekly_cycles\": \"description\",\n            \"trigger_patterns\": \"description\",\n            \"recovery_patterns\": \"description\"\n          },\n          \"insights\": [\"insight1\", \"insight2\", \"insight3\"],\n          \"recommendations\": [\"rec1\", \"rec2\", \"rec3\"],\n          \"risk_factors\": [\"factor1\", \"factor2\"],\n          \"confidence\": 0.0-1.0\n        }\n      `\n\n      const response = await this.callBailianAPI(prompt, 'pattern-analysis')\n      const analysisResult = JSON.parse(response.output.text)\n\n      return {\n        userId,\n        patterns: analysisResult.patterns || {},\n        trends: analysisResult.trends || {},\n        anomalies: analysisResult.risk_factors || [],\n        confidence: analysisResult.confidence || 0.6,\n        timeframe\n      }\n\n    } catch (error) {\n      logger.error('Behavioral pattern analysis failed', { userId, error })\n      return {\n        userId,\n        patterns: {},\n        trends: {},\n        anomalies: [],\n        confidence: 0.1,\n        timeframe\n      }\n    }\n  }\n\n  /**\n   * Analyze voice characteristics for emotional state\n   */\n  async analyzeVoiceEmotions(audioFeatures: any): Promise<VoiceAnalysis> {\n    try {\n      // Simplified voice analysis based on features\n      // In production, this would use specialized voice AI models\n      \n      const analysis: VoiceAnalysis = {\n        pitch: {\n          average: audioFeatures.averagePitch || 200,\n          variation: audioFeatures.pitchVariation || 50,\n          trend: audioFeatures.pitchTrend || 'stable'\n        },\n        energy: {\n          level: audioFeatures.energyLevel || 0.5,\n          consistency: audioFeatures.energyConsistency || 0.7\n        },\n        rhythm: {\n          pace: audioFeatures.speechPace || 'normal',\n          pauseFrequency: audioFeatures.pauseFrequency || 0.3\n        },\n        pauses: {\n          frequency: audioFeatures.pauseFrequency || 0.3,\n          duration: audioFeatures.averagePauseDuration || 1.2\n        },\n        emotionalMarkers: {\n          stress: this.calculateStressFromVoice(audioFeatures),\n          sadness: this.calculateSadnessFromVoice(audioFeatures),\n          anxiety: this.calculateAnxietyFromVoice(audioFeatures)\n        },\n        stressIndicators: {\n          voiceShaking: audioFeatures.tremor || false,\n          rapidSpeech: audioFeatures.rapidSpeech || false,\n          breathlessness: audioFeatures.breathlessness || false\n        },\n        confidence: audioFeatures.audioQuality > 0.7 ? 'high' : 'medium'\n      }\n\n      return analysis\n\n    } catch (error) {\n      logger.error('Voice emotion analysis failed', { error })\n      return {\n        pitch: { average: 0, variation: 0, trend: 'unknown' },\n        energy: { level: 0, consistency: 0 },\n        rhythm: { pace: 'unknown', pauseFrequency: 0 },\n        pauses: { frequency: 0, duration: 0 },\n        emotionalMarkers: { stress: 0, sadness: 0, anxiety: 0 },\n        stressIndicators: { voiceShaking: false, rapidSpeech: false, breathlessness: false },\n        confidence: 'low'\n      }\n    }\n  }\n\n  /**\n   * Generate personalized insights and recommendations\n   */\n  async generatePersonalizedInsights(\n    userId: string,\n    userData: {\n      moodAnalysis: MoodAnalysis\n      patternAnalysis: PatternAnalysis\n      recentConversations: any[]\n      goals: any[]\n      preferences: any\n    }\n  ): Promise<any> {\n    try {\n      const prompt = `\n        Based on the user's mental health data, generate personalized insights and actionable recommendations.\n        \n        Current Mood Analysis:\n        - Primary mood: ${userData.moodAnalysis.primaryMood}\n        - Anxiety level: ${userData.moodAnalysis.anxietyLevel}/10\n        - Stress level: ${userData.moodAnalysis.stressLevel}/10\n        - Confidence: ${userData.moodAnalysis.confidence}\n        \n        Pattern Analysis:\n        - Identified patterns: ${JSON.stringify(userData.patternAnalysis.patterns)}\n        - Trends: ${JSON.stringify(userData.patternAnalysis.trends)}\n        - Anomalies: ${userData.patternAnalysis.anomalies.join(', ')}\n        \n        Recent Conversation Topics: ${userData.recentConversations.map(c => c.theme).join(', ')}\n        User Goals: ${userData.goals.map(g => g.title).join(', ')}\n        \n        Generate response in JSON format:\n        {\n          \"insights\": [\n            {\n              \"title\": \"insight title\",\n              \"description\": \"detailed insight\",\n              \"priority\": \"high|medium|low\",\n              \"category\": \"mood|behavior|progress|goals\"\n            }\n          ],\n          \"recommendations\": [\n            {\n              \"title\": \"recommendation title\",\n              \"description\": \"actionable recommendation\",\n              \"timeframe\": \"immediate|daily|weekly|monthly\",\n              \"difficulty\": \"easy|medium|challenging\"\n            }\n          ],\n          \"progressHighlights\": [\"highlight1\", \"highlight2\"],\n          \"areasForAttention\": [\"area1\", \"area2\"]\n        }\n      `\n\n      const response = await this.callBailianAPI(prompt, 'pattern-analysis')\n      return JSON.parse(response.output.text)\n\n    } catch (error) {\n      logger.error('Personalized insights generation failed', { userId, error })\n      return {\n        insights: [],\n        recommendations: [],\n        progressHighlights: [],\n        areasForAttention: []\n      }\n    }\n  }\n\n  /**\n   * Core Bailian API communication\n   */\n  private async callBailianAPI(\n    prompt: string,\n    taskType: keyof typeof this.modelConfigurations\n  ): Promise<BailianResponse> {\n    const startTime = Date.now()\n    const config = this.modelConfigurations[taskType]\n\n    try {\n      const response = await fetch(`${this.bailianEndpoint}/api/v1/services/aigc/text-generation/generation`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.bailianApiKey}`,\n          'X-DashScope-SSE': 'disable'\n        },\n        body: JSON.stringify({\n          model: config.model,\n          input: {\n            messages: [\n              {\n                role: 'system',\n                content: 'You are a compassionate mental health AI assistant trained in evidence-based therapeutic techniques. Provide helpful, empathetic, and professional responses while being mindful of crisis situations.'\n              },\n              {\n                role: 'user',\n                content: prompt\n              }\n            ]\n          },\n          parameters: {\n            max_tokens: config.maxTokens,\n            temperature: config.temperature,\n            top_p: 0.8,\n            repetition_penalty: 1.1\n          }\n        })\n      })\n\n      if (!response.ok) {\n        const errorText = await response.text()\n        throw new Error(`Bailian API error: ${response.status} - ${errorText}`)\n      }\n\n      const data: BailianResponse = await response.json()\n      \n      // Log performance\n      performanceLogger.logExternalServiceCall(\n        'bailian',\n        taskType,\n        Date.now() - startTime,\n        true\n      )\n\n      return data\n\n    } catch (error) {\n      performanceLogger.logExternalServiceCall(\n        'bailian',\n        taskType,\n        Date.now() - startTime,\n        false,\n        error instanceof Error ? error.message : 'Unknown error'\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Helper methods\n   */\n  private buildMoodAnalysisPrompt(request: MoodAnalysisRequest): string {\n    let prompt = `\n      Analyze the emotional state and mood from the following text.\n      Text: \"${request.text}\"\n    `\n\n    if (request.contextualFactors) {\n      prompt += `\n      \n      Additional Context:\n      - Time of day: ${request.contextualFactors.timeOfDay || 'unknown'}\n      - Recent mood history: ${request.contextualFactors.moodHistory?.slice(-5).join(', ') || 'none'}\n      `\n    }\n\n    if (request.conversationHistory && request.conversationHistory.length > 0) {\n      prompt += `\n      \n      Recent conversation context:\n      ${request.conversationHistory.slice(-3).map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n      `\n    }\n\n    prompt += `\n      \n      Provide detailed mood analysis in JSON format:\n      {\n        \"primaryMood\": \"happy|sad|anxious|angry|calm|excited|depressed|neutral\",\n        \"emotions\": {\n          \"joy\": 0.0-1.0,\n          \"sadness\": 0.0-1.0,\n          \"anxiety\": 0.0-1.0,\n          \"anger\": 0.0-1.0,\n          \"fear\": 0.0-1.0\n        },\n        \"anxietyLevel\": 1-10,\n        \"depressionIndicators\": {\n          \"hopelessness\": 0.0-1.0,\n          \"fatigue\": 0.0-1.0,\n          \"worthlessness\": 0.0-1.0\n        },\n        \"stressLevel\": 1-10,\n        \"confidence\": 0.0-1.0\n      }\n    `\n\n    return prompt\n  }\n\n  private buildTherapeuticPrompt(\n    userMessage: string,\n    conversationHistory: BailianMessage[],\n    userPersonality?: any,\n    moodContext?: MoodAnalysis\n  ): string {\n    let prompt = `\n      Generate a therapeutic response to the user's message using evidence-based techniques.\n      \n      User's message: \"${userMessage}\"\n    `\n\n    if (moodContext) {\n      prompt += `\n      \n      Current mood context:\n      - Primary mood: ${moodContext.primaryMood}\n      - Anxiety level: ${moodContext.anxietyLevel}/10\n      - Stress level: ${moodContext.stressLevel}/10\n      `\n    }\n\n    if (conversationHistory.length > 0) {\n      prompt += `\n      \n      Recent conversation:\n      ${conversationHistory.slice(-3).map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n      `\n    }\n\n    prompt += `\n      \n      Provide response in JSON format:\n      {\n        \"response\": \"therapeutic response text\",\n        \"techniques\": [\"cognitive_reframing\", \"active_listening\", \"validation\"],\n        \"tone\": \"empathetic|supportive|encouraging|gentle\",\n        \"personalization\": 0.0-1.0,\n        \"followUp\": [\"suggestion1\", \"suggestion2\"],\n        \"confidence\": 0.0-1.0\n      }\n      \n      Guidelines:\n      - Be empathetic and non-judgmental\n      - Use person-first language\n      - Validate emotions while encouraging healthy coping\n      - Ask open-ended questions when appropriate\n      - Suggest practical strategies\n      - Recognize crisis situations and provide appropriate resources\n    `\n\n    return prompt\n  }\n\n  private parseMoodAnalysisResponse(responseText: string): any {\n    try {\n      return JSON.parse(responseText)\n    } catch (error) {\n      logger.warn('Failed to parse mood analysis response, using fallback', { responseText })\n      return {\n        primaryMood: 'neutral',\n        emotions: {},\n        anxietyLevel: 5,\n        depressionIndicators: {},\n        stressLevel: 5,\n        confidence: 0.3\n      }\n    }\n  }\n\n  private parseTherapeuticResponse(responseText: string): any {\n    try {\n      return JSON.parse(responseText)\n    } catch (error) {\n      // If JSON parsing fails, return the raw text as response\n      return {\n        response: responseText,\n        techniques: ['supportive_listening'],\n        tone: 'empathetic',\n        personalization: 0.5,\n        followUp: [],\n        confidence: 0.7\n      }\n    }\n  }\n\n  private createFallbackMoodAnalysis(userId: string): MoodAnalysis {\n    return {\n      userId,\n      primaryMood: 'neutral',\n      emotions: { joy: 0.5, sadness: 0.3, anxiety: 0.4 },\n      anxietyLevel: 5,\n      depressionIndicators: { hopelessness: 0.2, fatigue: 0.3, worthlessness: 0.1 },\n      stressLevel: 5,\n      confidence: 0.2,\n      timestamp: new Date(),\n      analysisVersion: 'fallback-v1.0'\n    }\n  }\n\n  private createFallbackTherapeuticResponse(): TherapeuticResponse {\n    return {\n      content: \"I understand you're going through a difficult time. I'm here to listen and support you. Would you like to talk more about what's on your mind?\",\n      therapeuticTechniques: ['active_listening', 'validation'],\n      emotionalTone: 'supportive',\n      personalizationLevel: 0.3,\n      followUpSuggestions: ['Tell me more about your feelings', 'What would help you feel better right now?'],\n      metadata: {\n        model: 'fallback',\n        processingTime: 0,\n        confidence: 0.5,\n        tokens: 0\n      }\n    }\n  }\n\n  private calculateStressFromVoice(features: any): number {\n    // Simplified stress calculation from voice features\n    let stressScore = 0\n    if (features.pitchVariation > 80) stressScore += 0.3\n    if (features.speechPace === 'fast') stressScore += 0.3\n    if (features.tremor) stressScore += 0.4\n    return Math.min(stressScore, 1.0)\n  }\n\n  private calculateSadnessFromVoice(features: any): number {\n    // Simplified sadness calculation from voice features\n    let sadnessScore = 0\n    if (features.averagePitch < 150) sadnessScore += 0.3\n    if (features.energyLevel < 0.3) sadnessScore += 0.3\n    if (features.speechPace === 'slow') sadnessScore += 0.4\n    return Math.min(sadnessScore, 1.0)\n  }\n\n  private calculateAnxietyFromVoice(features: any): number {\n    // Simplified anxiety calculation from voice features\n    let anxietyScore = 0\n    if (features.pitchVariation > 70) anxietyScore += 0.3\n    if (features.pauseFrequency < 0.1) anxietyScore += 0.3 // Rapid speech\n    if (features.breathlessness) anxietyScore += 0.4\n    return Math.min(anxietyScore, 1.0)\n  }\n\n  /**\n   * Simple message analysis for crisis detection\n   */\n  async analyzeMessage(prompt: string): Promise<{ content: string }> {\n    try {\n      const response = await this.callBailianAPI(prompt, 'crisis-detection')\n      return { content: response.output.text }\n    } catch (error) {\n      logger.error('Message analysis failed', { error })\n      return { content: 'Analysis unavailable' }\n    }\n  }\n}\n\nexport const bailianService = new AIService()\nexport { AIService }\nexport default bailianService