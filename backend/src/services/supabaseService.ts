import { createClient } from '@supabase/supabase-js'\nimport { supabaseConfig } from '@/config'\nimport { logger } from '@/utils/logger'\n\n// Initialize Supabase client with service role key for backend operations\nexport const supabase = createClient(\n  supabaseConfig.url,\n  supabaseConfig.serviceRoleKey,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    },\n    db: {\n      schema: 'public'\n    },\n    global: {\n      headers: {\n        'x-application-name': 'rebloom-backend'\n      }\n    }\n  }\n)\n\n// Client for user-facing operations (with anon key)\nexport const supabaseClient = createClient(\n  supabaseConfig.url,\n  supabaseConfig.anonKey,\n  {\n    auth: {\n      autoRefreshToken: true,\n      persistSession: true\n    }\n  }\n)\n\n// Health check for Supabase connection\nexport async function checkSupabaseHealth(): Promise<{\n  healthy: boolean\n  message: string\n  latency?: number\n}> {\n  try {\n    const start = Date.now()\n    const { data, error } = await supabase\n      .from('users')\n      .select('count')\n      .limit(1)\n      .single()\n    \n    const latency = Date.now() - start\n    \n    if (error && error.code !== 'PGRST116') { // PGRST116 is \"no rows found\" which is fine\n      throw error\n    }\n    \n    return {\n      healthy: true,\n      message: 'Supabase connection healthy',\n      latency\n    }\n  } catch (error) {\n    logger.error('Supabase health check failed', { error })\n    return {\n      healthy: false,\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }\n  }\n}\n\nif (!supabaseConfig.url || !supabaseConfig.serviceRoleKey) {\n  logger.error('Supabase configuration is incomplete')\n}\n\nexport default supabase