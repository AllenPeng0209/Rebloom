import { crisisDetectionService } from '../../src/services/crisisDetectionService'\nimport { CrisisAssessment } from '../../src/types'\n\ndescribe('CrisisDetectionService', () => {\n  const mockUserId = 'test-user-123'\n  const mockSessionId = 'test-session-123'\n  const mockMessageId = 'test-message-123'\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('analyzeMessage', () => {\n    it('should detect critical risk for explicit suicide mentions', async () => {\n      const message = 'I want to kill myself and have a plan'\n      \n      const assessment = await crisisDetectionService.analyzeMessage(\n        message,\n        mockUserId,\n        mockSessionId,\n        mockMessageId\n      )\n\n      expect(assessment.riskLevel).toBe('critical')\n      expect(assessment.confidence).toBeGreaterThan(0.8)\n      expect(assessment.triggers).toContain('kill myself')\n      expect(assessment.recommendedActions).toContain('immediate_intervention')\n    })\n\n    it('should detect high risk for self-harm indicators', async () => {\n      const message = 'I keep cutting myself when I feel overwhelmed'\n      \n      const assessment = await crisisDetectionService.analyzeMessage(\n        message,\n        mockUserId,\n        mockSessionId,\n        mockMessageId\n      )\n\n      expect(assessment.riskLevel).toBe('high')\n      expect(assessment.confidence).toBeGreaterThan(0.6)\n      expect(assessment.triggers).toContain('cutting myself')\n    })\n\n    it('should detect medium risk for general distress', async () => {\n      const message = 'I feel so depressed and anxious all the time'\n      \n      const assessment = await crisisDetectionService.analyzeMessage(\n        message,\n        mockUserId,\n        mockSessionId,\n        mockMessageId\n      )\n\n      expect(assessment.riskLevel).toBe('medium')\n      expect(assessment.confidence).toBeGreaterThan(0.4)\n    })\n\n    it('should detect low risk for neutral messages', async () => {\n      const message = 'I had a good day today, went for a walk'\n      \n      const assessment = await crisisDetectionService.analyzeMessage(\n        message,\n        mockUserId,\n        mockSessionId,\n        mockMessageId\n      )\n\n      expect(assessment.riskLevel).toBe('low')\n    })\n\n    it('should handle empty or invalid messages gracefully', async () => {\n      const message = ''\n      \n      const assessment = await crisisDetectionService.analyzeMessage(\n        message,\n        mockUserId,\n        mockSessionId,\n        mockMessageId\n      )\n\n      expect(assessment).toBeDefined()\n      expect(assessment.riskLevel).toBe('low')\n      expect(assessment.confidence).toBeLessThan(0.5)\n    })\n\n    it('should return valid assessment structure', async () => {\n      const message = 'I am feeling hopeless'\n      \n      const assessment = await crisisDetectionService.analyzeMessage(\n        message,\n        mockUserId,\n        mockSessionId,\n        mockMessageId\n      )\n\n      expect(assessment).toMatchObject({\n        id: expect.any(String),\n        userId: mockUserId,\n        messageId: mockMessageId,\n        riskLevel: expect.stringMatching(/^(low|medium|high|critical)$/),\n        confidence: expect.any(Number),\n        triggers: expect.any(Array),\n        recommendedActions: expect.any(Array),\n        assessment: expect.any(String),\n        timestamp: expect.any(Date)\n      })\n\n      expect(assessment.confidence).toBeGreaterThanOrEqual(0)\n      expect(assessment.confidence).toBeLessThanOrEqual(1)\n    })\n  })\n})"